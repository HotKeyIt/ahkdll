import "wtypes.idl";

[
    uuid(9C5F743B-A646-4EC9-8CE1-0728A07E7C21),
    version(1.0)
]

library AutoHotkey
{
	importlib("stdole32.tlb");
#ifdef _WIN64
	importlib("stdole2.tlb"); 
#else
	importlib("stdole.tlb");
#endif
	[ uuid(A58E17B4-F892-4839-8C46-9F3C062FDF7D),
	  dual,
	  oleautomation 
	]
	interface ICOMServer : IDispatch
	{
		[id(1)] HRESULT ahktextdll([in,optional] VARIANT script,[in,optional] VARIANT params,[in,optional] VARIANT title, [out, retval] UINT_PTR* hThread);
		[id(2)] HRESULT ahkdll([in,optional] VARIANT filepath,[in,optional] VARIANT params,[in,optional] VARIANT title, [out, retval] UINT_PTR* hThread);
		[id(3)] HRESULT ahkPause([in,optional] VARIANT aChangeTo,[out, retval] int* paused);
		[id(4)] HRESULT ahkReady([out, retval] int* ready);
		[id(5)] HRESULT ahkFindLabel([in] VARIANT aLabelName,[out, retval] UINT_PTR *pLabel);
		[id(6)] HRESULT ahkgetvar([in] VARIANT name,[in,optional] VARIANT getVar,[out, retval] VARIANT *returnVal);
		[id(7)] HRESULT ahkassign([in] VARIANT name,[in,optional] VARIANT value,[out, retval] int* success);
		[id(8)] HRESULT ahkExecuteLine([in,optional] VARIANT line,[in,optional] VARIANT aMode,[in,optional] VARIANT wait,[out, retval] UINT_PTR* pLine);
		[id(9)] HRESULT ahkLabel([in] VARIANT aLabelName,[in,optional] VARIANT nowait,[out, retval] int* success);
		[id(10)] HRESULT ahkFindFunction([in] VARIANT FuncName,[out, retval] UINT_PTR *pFunc);
		[id(11)] HRESULT ahkFunction([in] VARIANT FuncName,[in,optional] VARIANT param1,[in,optional] VARIANT param2,[in,optional] VARIANT param3,[in,optional] VARIANT param4,[in,optional] VARIANT param5,[in,optional] VARIANT param6,[in,optional] VARIANT param7,[in,optional] VARIANT param8,[in,optional] VARIANT param9,[in,optional] VARIANT param10,[out, retval] VARIANT* returnVal);
		[id(12)] HRESULT ahkPostFunction([in] VARIANT FuncName,[in,optional] VARIANT param1,[in,optional] VARIANT param2,[in,optional] VARIANT param3,[in,optional] VARIANT param4,[in,optional] VARIANT param5,[in,optional] VARIANT param6,[in,optional] VARIANT param7,[in,optional] VARIANT param8,[in,optional] VARIANT param9,[in,optional] VARIANT param10,[out, retval] int* returnVal);
		[id(13)] HRESULT addScript([in] VARIANT script,[in,optional] VARIANT waitexecute,[out, retval]UINT_PTR* success);
		[id(14)] HRESULT addFile([in] VARIANT filepath,[in,optional] VARIANT waitexecute,[out, retval] UINT_PTR* success);
		[id(15)] HRESULT ahkExec([in] VARIANT script,[out, retval] BOOL* success);
		[id(16)] HRESULT ahkTerminate([in,optional] VARIANT kill,[out, retval] BOOL* success);
		[id(17)] HRESULT ahkReload([in,optional] VARIANT timeout);
		[id(18)] HRESULT ahkIsUnicode([out, retval] BOOL* IsUnicode);
	}

	[ uuid(FEEEC4BA-04AF-45F0-B385-7290C65CFB9B),
	  helpstring("AutoHotkey2 Script") 
	]
	coclass CoCOMServer
	{
		[default] interface ICOMServer;
	}
#ifdef _WIN64
	[ uuid(F1D0DE03-30FD-4326-B33F-989BBFAA5FFA),
	  helpstring("AutoHotkey2 Script X64") 
	]
	coclass CoCOMServerOptional
	{
		[default] interface ICOMServer;
	}
#else
#ifdef _UNICODE
	[ uuid(EC81EBBA-6CEE-4363-AB77-C0E57046AA89),
	  helpstring("AutoHotkey2 Script UNICODE") 
	]
	coclass CoCOMServerOptional
	{
		[default] interface ICOMServer;
	}
#else
	[ uuid(DE91AE03-EC49-4A4F-85DC-100A74406103),
	  helpstring("AutoHotkey2 Script ANSI") 
	]
	coclass CoCOMServerOptional
	{
		[default] interface ICOMServer;
	}
#endif //Unicode
#endif //Win64
}
